  Einführung
      Java ist eine universelle Computerprogrammiersprache, die parallel, klassenbasiert und objektorientiert ist [15] und die so konzipiert ist, dass sie so wenig Implementierungsabhängigkeiten wie möglich hat. Es soll Anwendungsentwicklern ermöglichen, "einmal schreiben, irgendwo laufen" (WORA) [16], was bedeutet, dass kompilierter Java-Code auf allen Plattformen laufen kann, die Java unterstützen, ohne dass eine Neukompilierung erforderlich ist. [17] Java-Anwendungen werden normalerweise zu Bytecodes kompiliert, die unabhängig von der Computerarchitektur auf jeder Java Virtual Machine (JVM) ausgeführt werden können. Seit 2016 ist Java eine der am häufigsten verwendeten Programmiersprachen, [18] [19] [20] [21] insbesondere für Client-Server-Webanwendungen mit 9 Millionen Entwicklern. [22] Java wurde ursprünglich von James Gosling bei Sun Microsystems (inzwischen von Oracle Corporation übernommen) entwickelt und 1995 als Kernkomponente der Java-Plattform von Sun Microsystems veröffentlicht. Die Sprache bezieht viele ihrer ursprünglichen Funktionen von SmallTalk mit einer Syntax, die der von C und C ++ ähnelt, aber sie hat weniger Low-Level-Funktionen als beide. Die Original- und Referenzimplementierungs-Java-Compiler, virtuellen Maschinen und Klassenbibliotheken wurden ursprünglich von Sun unter proprietären Lizenzen veröffentlicht. Seit Mai 2007 hat Sun die meisten seiner Java-Technologien gemäß den Spezifikationen des Java Community Process unter der GNU General Public License eingeführt. Andere haben auch alternative Implementierungen dieser Sun-Technologien entwickelt, z. B. den GNU-Compiler für Java (Bytecode-Compiler), GNU-Klassenpfad (Standardbibliotheken) und IcedTea-Web (Browser-Plugin für Applets). Die neueste Version ist Java 11, das am 25. September 2018 veröffentlicht wurde und nach nur sechs Monaten auf Java 10 folgt [23] und dem neuen Veröffentlichungszeitplan entspricht. Java 8 wird weiterhin unterstützt, es wird jedoch keine Sicherheitsupdates für Java 9 mehr geben. [24] Versionen vor Java 8 werden von Unternehmen kommerziell unterstützt. z.B. von Oracle ab Oktober 2017 auf Java 6 zurückgesetzt (während sie immer noch empfehlen, "Deinstallation" [25] von mindestens Windows-Computern vor Java 8).
    
  Geschichte
      Duke, das Java-Maskottchen
      James Gosling, der Schöpfer von Java, im Jahr 2008
      Die Beliebtheitsskala der Popularität der TIOBE-Programmiersprache von 2002 bis 2018. Im Laufe eines Jahrzehnts konkurrierten Java (blau) und C (schwarz) um die Spitzenposition. James Gosling, Mike Sheridan und Patrick Naughton initiierten das Java-Projekt im Juni 1991. Java wurde ursprünglich für interaktives Fernsehen entwickelt, war jedoch damals für die digitale Kabelfernsehbranche zu weit fortgeschritten. [27] Die Sprache wurde anfangs Eiche nach einer Eiche genannt, die vor Goslings Büro stand. Später erhielt das Projekt den Namen Green und wurde schließlich von Java-Kaffee in Java umbenannt. [28] Gosling entwickelte Java mit einer C / C ++ - artigen Syntax, die System- und Anwendungsprogrammierer kennenlernen würden.
Sun Microsystems veröffentlichte 1996 die erste öffentliche Implementierung als Java 1.0. [30] Es versprach "Write Once, Run Anywhere" (WORA) und ermöglichte kostenlose Laufzeiten auf gängigen Plattformen. Ziemlich sicher und konfigurierbar, erlaubte es den Zugriff auf das Netzwerk und den Zugriff auf Dateien. Große Webbrowser bauten bald die Möglichkeit ein, Java-Applets innerhalb von Webseiten auszuführen, und Java wurde schnell populär. Der Java 1.0-Compiler wurde von Arthur van Hoff in Java neu geschrieben, um die Sprachspezifikation von Java 1.0 strikt zu erfüllen. [31] Mit dem Aufkommen von Java 2 (ursprünglich als J2SE 1.2 im Dezember 1998 - 1999 veröffentlicht) wurden für neue Versionen mehrere Konfigurationen für verschiedene Plattformtypen erstellt. Zu J2EE gehörende Technologien und APIs für Unternehmensanwendungen werden normalerweise in Serverumgebungen ausgeführt, während J2ME APIs für mobile Anwendungen enthält. Die Desktopversion wurde in J2SE umbenannt. Im Jahr 2006 benannte Sun die neuen J2-Versionen zu Marketingzwecken in Java EE, Java ME und Java SE um.
    
    Design
Ein Linux-basiertes System ist ein modulares Unix-artiges Betriebssystem, das einen Großteil seines grundlegenden Designs von Prinzipien ableitet, die in den 1970er und 1980er Jahren von Unix festgelegt wurden. Ein solches System verwendet einen monolithischen Kernel, den Linux-Kernel, der die Prozesssteuerung, das Netzwerk, den Zugriff auf die Peripheriegeräte und Dateisysteme übernimmt. Gerätetreiber werden entweder direkt in den Kernel integriert oder als Module hinzugefügt, die bei laufendem System geladen werden. Das GNU-Benutzerland ist ein Schlüsselbestandteil der meisten Systeme, die auf dem Linux-Kernel basieren, wobei Android die Ausnahme ist. Die Implementierung der C-Bibliothek durch das Projekt fungiert als Wrapper für die Systemaufrufe des Linux-Kernels, die für die Kernel-Userspace-Schnittstelle erforderlich sind. Die Toolchain ist eine umfangreiche Sammlung von Programmiertools, die für die Linux-Entwicklung unerlässlich sind (einschließlich der zum Erstellen des Linux-Kernels verwendeten Compiler) selbst) und die coreutils implementieren viele grundlegende Unix-Tools. Das Projekt entwickelt auch eine beliebte CLI-Shell. Die grafische Benutzeroberfläche (oder GUI), die von den meisten Linux-Systemen verwendet wird, basiert auf einer Implementierung des X Window-Systems. In letzter Zeit versucht die Linux-Community, anstelle von X11 als neues Display-Server-Protokoll zu Wayland aufzusteigen. Viele andere Open-Source-Softwareprojekte tragen zu Linux-Systemen bei.
    
    Applet
      Java-Applets waren Programme, die in andere Anwendungen eingebettet waren, normalerweise in eine Webseite, die in einem Webbrowser angezeigt wird. Die Java-Applet-API ist seit Java 9 im Jahr 2017 veraltet.
    
    Servlet
      Die Java-Servlet-Technologie bietet Webentwicklern einen einfachen, konsistenten Mechanismus zur Erweiterung der Funktionalität eines Webservers und zum Zugriff auf vorhandene Geschäftssysteme. Servlets sind serverseitige Java EE-Komponenten, die Antworten (normalerweise HTML-Seiten) auf Anforderungen (normalerweise HTTP-Anforderungen) von Clients generieren.
Die Java-Servlet-API wurde teilweise durch zwei Java-Standardtechnologien für Webservices ersetzt:
          die Java-API für RESTful Web Services (JAX-RS 2.0), die für AJAX-, JSON- und REST-Services nützlich ist,
          die Java-API für XML-Webdienste (JAX-WS), die für SOAP-Webdienste nützlich ist.
    
    JavaServer-Seiten
      Hauptartikel: JavaServer Pages
JavaServer Pages (JSP) sind serverseitige Java EE-Komponenten, die Antworten (normalerweise HTML-Seiten) auf HTTP-Anforderungen von Clients generieren. JSPs binden Java-Code in eine HTML-Seite ein, indem sie die speziellen Trennzeichen <% und%> verwenden. Eine JSP wird beim ersten Zugriff auf ein Java-Servlet, eine eigene Java-Anwendung, kompiliert. Danach generiert das generierte Servlet die Antwort.
      
    Swing-Anwendung
Swing ist eine grafische Benutzeroberflächenbibliothek für die Java SE-Plattform. Durch das steckbare Look-and-Feel-System von Swing kann ein anderes Erscheinungsbild festgelegt werden. Klone von Windows, GTK + und Motif werden von Sun bereitgestellt. Apple bietet außerdem einen Aqua-Look für MacOS. Wenn frühere Implementierungen dieser Looks und Freaks als fehlend betrachtet wurden, behebt Swing in Java SE 6 dieses Problem, indem es native GUI-Widget-Zeichnungsroutinen der zugrunde liegenden Plattformen verwendet. </ Div>
      
    JavaFX-Anwendung
        JavaFX ist eine Softwareplattform zum Erstellen und Bereitstellen von Desktop-Anwendungen sowie Rich-Internet-Anwendungen (RIAs), die auf einer Vielzahl von Geräten ausgeführt werden können. JavaFX soll Swing als Standard-GUI-Bibliothek für Java SE ersetzen, beide werden jedoch auf absehbare Zeit enthalten sein. JavaFX unterstützt Desktop-Computer und Webbrowser unter Microsoft Windows, Linux und macOS. JavaFX bietet keine Unterstützung für das native Aussehen und Verhalten von Betriebssystemen. </ div>
    
    Generics
      Im Jahr 2004 wurden Generics als Teil von J2SE 5.0 zur Java-Sprache hinzugefügt. Vor der Einführung von Generika musste jede Variablendeklaration von einem bestimmten Typ sein. Dies ist zum Beispiel für Containerklassen ein Problem, da es nicht einfach ist, einen Container zu erstellen, der nur bestimmte Objekttypen akzeptiert. Entweder arbeitet der Container für alle Untertypen einer Klasse oder Schnittstelle, normalerweise Object, oder es muss für jede enthaltene Klasse eine andere Containerklasse erstellt werden. Generics ermöglichen die Prüfung der Kompilierungszeit, ohne dass viele Containerklassen erstellt werden müssen, die jeweils nahezu identischen Code enthalten. Neben der Aktivierung eines effizienteren Codes wird das Auftreten bestimmter Laufzeitausnahmen durch Ausgabe von Fehlern bei der Kompilierung verhindert. Wenn Java verhindert, dass alle Laufzeittypfehler (ClassCastException) auftreten, ist es typsicher.
            
