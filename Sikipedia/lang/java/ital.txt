  introduzione
      Java è un linguaggio di programmazione per computer di uso generale che è simultaneo, basato sulla classe, orientato agli oggetti, [15] e specificamente progettato per avere il minor numero possibile di dipendenze di implementazione. È destinato a consentire agli sviluppatori di applicazioni di "scrivere una volta, eseguire ovunque" (WORA), [16], il che significa che il codice Java compilato può essere eseguito su tutte le piattaforme che supportano Java senza necessità di ricompilazione. [17] Le applicazioni Java sono in genere compilate in bytecode che può essere eseguito su qualsiasi Java virtual machine (JVM) indipendentemente dall'architettura del computer. A partire dal 2016, Java è uno dei linguaggi di programmazione più diffusi in uso, [18] [19] [20] [21], in particolare per le applicazioni Web client-server, con 9 milioni di sviluppatori segnalati. [22] Java è stato originariamente sviluppato da James Gosling presso Sun Microsystems (che è stato successivamente acquisito da Oracle Corporation) e rilasciato nel 1995 come componente principale della piattaforma Java di Sun Microsystems. Il linguaggio deriva gran parte delle sue caratteristiche originali da SmallTalk, con una sintassi simile a C e C ++, ma ha meno strutture di basso livello rispetto a uno di essi. L'implementazione originale e di riferimento I compilatori Java, le macchine virtuali e le librerie di classi sono stati originariamente rilasciati da Sun sotto licenze proprietarie. A partire da maggio 2007, in conformità con le specifiche del Java Community Process, Sun ha licenziato la maggior parte delle sue tecnologie Java sotto la GNU General Public License. Altri hanno anche sviluppato implementazioni alternative di queste tecnologie Sun, come GNU Compiler per Java (compilatore bytecode), GNU Classpath (librerie standard) e IcedTea-Web (plugin per browser per applet). L'ultima versione è Java 11, rilasciata il 25 settembre 2018, che segue Java 10 dopo soli sei mesi, [23] in linea con il nuovo programma di rilascio. Java 8 è ancora supportato ma non ci saranno più aggiornamenti di sicurezza per Java 9. [24] Le versioni precedenti a Java 8 sono supportate da società su base commerciale; per esempio. da Oracle a Java 6 a partire da ottobre 2017 (mentre continuano a "raccomandare vivamente di disinstallare" [25] pre-Java 8 da almeno computer Windows).
    
  Storia
      Duke, la mascotte di Java
      James Gosling, il creatore di Java, nel 2008
      Il grafico dell'indice di popolarità del linguaggio di programmazione TIOBE dal 2002 al 2018. Nel corso di un decennio, Java (blu) e C (nero) hanno gareggiato per la prima posizione. James Gosling, Mike Sheridan e Patrick Naughton iniziarono il progetto in lingua Java nel giugno 1991.Java fu originariamente progettato per la televisione interattiva, ma all'epoca era troppo avanzato per l'industria della televisione digitale via cavo [27]. Inizialmente la lingua era chiamata Oak, dopo una quercia che sorgeva fuori dall'ufficio di Gosling. Più tardi il progetto prese il nome di Green e fu finalmente ribattezzato Java, da Java caffè. [28] Gosling ha progettato Java con una sintassi in stile C / C ++ che i programmatori di applicazioni e applicazioni avrebbero trovato familiari.
Sun Microsystems ha rilasciato la prima implementazione pubblica come Java 1.0 nel 1996. [30] Ha promesso "Write Once, Run Anywhere" (WORA), fornendo run-time a costo zero su piattaforme popolari. Abbastanza sicuro e dotato di sicurezza configurabile, consentiva restrizioni di accesso alla rete e ai file. I principali browser Web incorporarono presto la possibilità di eseguire applet Java all'interno di pagine Web e Java divenne rapidamente popolare. Il compilatore Java 1.0 è stato riscritto in Java da Arthur van Hoff per rispettare rigorosamente le specifiche del linguaggio Java 1.0. [31] Con l'avvento di Java 2 (rilasciato inizialmente come J2SE 1.2 nel dicembre 1998 - 1999), le nuove versioni avevano più configurazioni costruite per diversi tipi di piattaforme. J2EE includeva tecnologie e API per applicazioni aziendali tipicamente eseguite in ambienti server, mentre J2ME presentava API ottimizzate per applicazioni mobili. La versione desktop è stata rinominata J2SE. Nel 2006, per scopi di marketing, Sun ha rinominato le nuove versioni J2 come Java EE, Java ME e Java SE, rispettivamente.
    
    Design
Un sistema basato su Linux è un sistema operativo modulare simile a Unix, che deriva gran parte del suo design di base dai principi stabiliti in Unix durante gli anni '70 e '80. Tale sistema utilizza un kernel monolitico, il kernel Linux, che gestisce il controllo del processo, il networking, l'accesso alle periferiche e ai file system. I driver di dispositivo sono integrati direttamente con il kernel o aggiunti come moduli che vengono caricati mentre il sistema è in esecuzione. L'area utente GNU è una parte fondamentale della maggior parte dei sistemi basati sul kernel Linux, con l'eccezione di Android. L'implementazione del progetto della libreria C funziona come un wrapper per le chiamate di sistema del kernel Linux necessarie all'interfaccia kernel-userspace, la toolchain è una vasta raccolta di strumenti di programmazione essenziali per lo sviluppo di Linux (inclusi i compilatori utilizzati per compilare il kernel di Linux stesso) e i coreutils implementano molti strumenti Unix di base. Il progetto sviluppa anche una famosa shell CLI. L'interfaccia utente grafica (o GUI) utilizzata dalla maggior parte dei sistemi Linux è basata su un'implementazione del sistema X Window. Più recentemente, la comunità Linux cerca di avanzare verso Wayland come nuovo protocollo del server dello schermo al posto di X11. Molti altri progetti di software open source contribuiscono ai sistemi Linux.
    
    Applet
      Le applet Java erano programmi incorporati in altre applicazioni, in genere in una pagina Web visualizzata in un browser web. L'API dell'applet Java ora è deprecata da Java 9 nel 2017.
    
    servlet
      La tecnologia servlet Java offre agli sviluppatori Web un meccanismo semplice e coerente per estendere la funzionalità di un server Web e per accedere ai sistemi aziendali esistenti. I servlet sono componenti Java EE lato server che generano risposte (in genere pagine HTML) alle richieste (in genere richieste HTTP) dai client.
L'API del servlet Java è stata in qualche modo sostituita da due tecnologie Java standard per i servizi Web:
          l'API Java per RESTful Web Services (JAX-RS 2.0) utile per i servizi AJAX, JSON e REST,
          l'API Java per i servizi Web XML (JAX-WS) utile per i servizi Web SOAP.
    
    JavaServer Pages
      Articolo principale: JavaServer Pages
JavaServer Pages (JSP) sono componenti Java EE lato server che generano risposte, in genere pagine HTML, alle richieste HTTP dei client. I JSP incorporano il codice Java in una pagina HTML utilizzando i delimitatori speciali <% e%>. Un JSP è compilato su un servlet Java, un'applicazione Java a sé stante, al primo accesso. Successivamente, il servlet generato crea la risposta.
      
    Applicazione Swing
Swing è una libreria di interfaccia utente grafica per la piattaforma Java SE. È possibile specificare un aspetto e una sensazione diversi attraverso il sistema di aspetto e di inserimento di Swing. Cloni di Windows, GTK + e Motif sono forniti da Sun. Apple offre anche un aspetto Aqua per MacOS. Laddove le precedenti implementazioni di questi aspetti potrebbero essere considerate carenti, Swing in Java SE 6 affronta questo problema utilizzando più routine di disegno del widget GUI nativo delle piattaforme sottostanti. </ Div>
      
    Applicazione JavaFX
        JavaFX è una piattaforma software per la creazione e la distribuzione di applicazioni desktop e di applicazioni Internet avanzate (RIA) che possono essere eseguite su un'ampia varietà di dispositivi. JavaFX è destinato a sostituire Swing come libreria GUI standard per Java SE, ma entrambi saranno inclusi per il prossimo futuro. JavaFX supporta i computer desktop e i browser Web su Microsoft Windows, Linux e macOS. JavaFX non supporta l'aspetto e il funzionamento del sistema operativo nativo. </ Div>
    
    Generics
      Nel 2004, i generici sono stati aggiunti al linguaggio Java, come parte di J2SE 5.0. Prima dell'introduzione dei generici, ogni dichiarazione di variabile doveva essere di un tipo specifico. Per le classi contenitore, ad esempio, questo è un problema perché non esiste un modo semplice per creare un contenitore che accetti solo tipi specifici di oggetti. O il contenitore funziona su tutti i sottotipi di una classe o di un'interfaccia, solitamente Object, oppure deve essere creata una classe contenitore diversa per ciascuna classe contenuta. I generici consentono il controllo del tipo in fase di compilazione senza dover creare molte classi contenitore, ciascuna contenente codice quasi identico. Oltre a consentire un codice più efficiente, è possibile impedire determinate eccezioni di runtime emettendo errori in fase di compilazione. Se Java ha impedito che si verifichino tutti gli errori di tipo runtime (ClassCastException), sarebbe sicuro.
            
